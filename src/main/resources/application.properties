## default connection pool
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

## PostgreSQL
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/postgres}
spring.datasource.username=postgres
spring.datasource.password=root

#drop n create table again, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=update


server.port=${PORT:2019}

spring.h2.console.enabled=true

# http://localhost:2019/h2-console
spring.h2.console.path=/h2-console

spring.jackson.serialization.fail-on-empty-beans=false

logging.level.org.springframework=INFO
server.error.include-stacktrace=never

jwt.secret=${JWT_SECRET:secret}

# Bucket4j
bucket4j.enabled=true
bucket4j.filters[0].cache-name=buckets
bucket4j.filters[0].url=.*
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=5
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=10
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=seconds
bucket4j.filters[0].http-response-body={ "message": "Too many requests" }
